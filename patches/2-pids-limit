diff --git a/agent/engine/docker_task_engine.go b/agent/engine/docker_task_engine.go
index 2c2e6e5c..e3740a9b 100644
--- a/agent/engine/docker_task_engine.go
+++ b/agent/engine/docker_task_engine.go
@@ -49,6 +49,7 @@ import (
 	utilsync "github.com/aws/amazon-ecs-agent/agent/utils/sync"
 	"github.com/aws/amazon-ecs-agent/agent/utils/ttime"
 	dockercontainer "github.com/docker/docker/api/types/container"
+	dockercontainer "github.com/docker/docker/api/types/container"
 
 	"github.com/cihub/seelog"
 	"github.com/docker/docker/api/types"
@@ -984,6 +985,20 @@ func (engine *DockerTaskEngine) createContainer(task *apitask.Task, container *a
 		return dockerapi.DockerContainerMetadata{Error: apierrors.NamedError(err)}
 	}
 
+	// docker run supports a --pids-limit flag, which replaces the nproc
+	// limit with a container aware version. In almost all circumstances,
+	// noproc should not be used, since it's global.
+	//
+	// See https://github.com/moby/moby/pull/18697
+	coercePidsLimit(hostConfig)
+
 	// Augment labels with some metadata from the agent. Explicitly do this last
 	// such that it will always override duplicates in the provided raw config
 	// data.
@@ -1405,3 +1420,20 @@ func getContainerHostIP(networkSettings *types.NetworkSettings) (string, bool) {
 	}
 	return "", false
 }
+
+func coercePidsLimit(config *dockercontainer.HostConfig) {
+	idx := -1
+	for i, l := range config.Ulimits {
+		if l.Name == "nproc" {
+			idx = i
+			break
+		}
+	}
+
+	if idx < 0 {
+		return
+	}
+
+	config.PidsLimit = config.Ulimits[idx].Soft
+	config.Ulimits = append(config.Ulimits[:idx], config.Ulimits[idx+1:]...)
+}
diff --git a/agent/engine/docker_task_engine_test.go b/agent/engine/docker_task_engine_test.go
index e3ad30b9..e2897b1a 100644
--- a/agent/engine/docker_task_engine_test.go
+++ b/agent/engine/docker_task_engine_test.go
@@ -3040,3 +3040,29 @@ func TestStartFirelensContainerRetryForContainerIP(t *testing.T) {
 	assert.NoError(t, ret.Error)
 	assert.Equal(t, jsonBaseWithNetwork.NetworkSettings, ret.NetworkSettings)
 }
+
+func TestCoercePidsLimit(t *testing.T) {
+	config := &docker.HostConfig{
+		Ulimits: []docker.ULimit{
+			{Name: "nproc", Soft: 90, Hard: 90},
+		},
+	}
+
+	coercePidsLimit(config)
+	assert.Equal(t, int64(90), config.PidsLimit)
+	assert.Equal(t, 0, len(config.Ulimits))
+	assert.Equal(t, []docker.ULimit{}, config.Ulimits)
+
+	nofile := docker.ULimit{Name: "nofile", Soft: 100, Hard: 100}
+	config = &docker.HostConfig{
+		Ulimits: []docker.ULimit{
+			nofile,
+			{Name: "nproc", Soft: 90, Hard: 90},
+		},
+	}
+
+	coercePidsLimit(config)
+	assert.Equal(t, int64(90), config.PidsLimit)
+	assert.Equal(t, 1, len(config.Ulimits))
+	assert.Equal(t, []docker.ULimit{nofile}, config.Ulimits)
+}
